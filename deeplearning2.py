# -*- coding: utf-8 -*-
"""DeepLearning2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GQf9OH7RcmgulMRZZowxN1YYt0M4GJFw

## Preprocessing
"""

from google.colab import drive
drive.mount('/content/drive')

# Import our dependencies
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import pandas as pd
import tensorflow as tf

#  Import and read the charity_data.csv.
import pandas as pd
application_df = pd.read_csv("https://static.bc-edx.com/data/dl-1-2/m21/lms/starter/charity_data.csv")
application_df.head()

# Drop the non-beneficial ID columns, 'EIN' .
application_df.drop(columns = ['EIN'],axis=1, inplace=True)

application_df['ASK_AMT'].dtype

# Determine the number of unique values in each column.
application_df.nunique()

# Look at NAME value counts to identify and replace with "Other"
name_types_counts = application_df['NAME'].value_counts()
name_types_counts

# Choose a cutoff value and create a list of names to be replaced

names_to_replace = name_types_counts[name_types_counts < 6].index.tolist()

# Replace in dataframe
for app in names_to_replace:
    application_df['NAME'] = application_df['NAME'].replace(app,"Other")

# Check to make sure replacement was successful
application_df['NAME'].value_counts()



# Look at APPLICATION_TYPE value counts to identify and replace with "Other"
application_types_counts = application_df['APPLICATION_TYPE'].value_counts()
application_types_counts

# Choose a cutoff value and create a list of application types to be replaced
# use the variable name `application_types_to_replace`
application_types_to_replace = application_types_counts[application_types_counts < 800].index.tolist()

# Replace in dataframe
for app in application_types_to_replace:
    application_df['APPLICATION_TYPE'] = application_df['APPLICATION_TYPE'].replace(app,"Other")

# Check to make sure replacement was successful
application_df['APPLICATION_TYPE'].value_counts()

# Look at CLASSIFICATION value counts to identify and replace with "Other"
classification_types_counts = application_df['CLASSIFICATION'].value_counts()
classification_types_counts

# You may find it helpful to look at CLASSIFICATION value counts >1
num_classifications_more_than_one = classification_types_counts[classification_types_counts > 1]

print(num_classifications_more_than_one)

# Choose a cutoff value and create a list of classifications to be replaced
# use the variable name `classifications_to_replace`
classifications_to_replace = classification_types_counts[classification_types_counts < 500].index.tolist()

# Replace in dataframe
for cls in classifications_to_replace:
    application_df['CLASSIFICATION'] = application_df['CLASSIFICATION'].replace(cls,"Other")

# Check to make sure replacement was successful
application_df['CLASSIFICATION'].value_counts()

# Convert categorical data to numeric with `pd.get_dummies`
dummy_cols = ['APPLICATION_TYPE', 'CLASSIFICATION', 'AFFILIATION', 'USE_CASE', 'ORGANIZATION', 'INCOME_AMT', 'SPECIAL_CONSIDERATIONS', 'NAME']
application_dummies = pd.get_dummies(application_df,columns = dummy_cols, dtype=int)
application_dummies.head()

# Split our preprocessed data into our features and target arrays
y = application_df['IS_SUCCESSFUL']
X = application_dummies.drop('IS_SUCCESSFUL', axis=1)
# Split the preprocessed data into a training and testing dataset
X_train, X_test, y_train, y_test = train_test_split(X,y,random_state=1, stratify = y)

# Create a StandardScaler instances
scaler = StandardScaler()

# Fit the StandardScaler
X_scaler = scaler.fit(X_train)

# Scale the data
X_train_scaled = X_scaler.transform(X_train)
X_test_scaled = X_scaler.transform(X_test)

"""## Compile, Train and Evaluate the Model"""

# Define the model - deep neural net, i.e., the number of input features and hidden nodes for each layer.
inputs = len(X_train_scaled[0])
layer1_units = 150
layer2_units = 90
layer3_units = 30
layer4_units = 16
layer1_activation = "tanh"
layer2_activation = "tanh"
layer3_activation = "tanh"
layer4_activation = "tanh"

nn = tf.keras.models.Sequential()

# First hidden layer
nn.add(tf.keras.layers.Dense(units = layer1_units, activation = layer1_activation, input_dim = inputs))

# Second hidden layer
nn.add(tf.keras.layers.Dense(units = layer2_units, activation = layer2_activation))

# Third hidden layer
nn.add(tf.keras.layers.Dense(units = layer3_units, activation = layer2_activation))

#Fourth hidden layer
nn.add(tf.keras.layers.Dense(units = layer4_units, activation = layer4_activation))

# Output layer
nn.add(tf.keras.layers.Dense(units = 1, activation = "sigmoid"))

# Check the structure of the model
nn.summary()

# Compile the model
nn.compile(loss = "binary_crossentropy", optimizer = "adam", metrics=["accuracy"])

import math
batch_size=32
num_batches= len(X_train_scaled)/batch_size
num_batches= math.ceil(num_batches)
num_batches

from tensorflow.keras.callbacks import ModelCheckpoint

# Define the filepath for saving the model weights
filepath = "/content/drive/MyDrive/Colab Notebooks/Model_Weights/model_weights_{epoch:02d}.h5"

# Create a ModelCheckpoint callback to save weights every five epochs
checkpoint_callback = ModelCheckpoint(filepath, save_weights_only=True, save_freq=5*num_batches, verbose=3)

# Train the model
nn_fit = nn.fit(X_train_scaled, y_train, epochs=25, callbacks=checkpoint_callback)

# Evaluate the model using the test data
model_loss, model_accuracy = nn.evaluate(X_test_scaled,y_test,verbose=2)
print(f"Loss: {model_loss}, Accuracy: {model_accuracy}")

# Export our model to HDF5 file
nn.save('/content/drive/MyDrive/Colab Notebooks/DeepLearning2.h5')

def create_model(hp):
    nn_model = tf.keras.models.Sequential()

    # Allow kerastuner to decide which activation function to use in hidden layers
    activation = hp.Choice('activation',['relu','tanh'])

    # Allow kerastuner to decide number of neurons in first layer
    nn_model.add(tf.keras.layers.Dense(units=hp.Int('first_units',
        min_value=1,
        max_value=150,
        step=5), activation=activation, input_dim=inputs))

    # Allow kerastuner to decide number of hidden layers and neurons in hidden layers
    for i in range(hp.Int('num_layers', 1, 5)):
        nn_model.add(tf.keras.layers.Dense(units=hp.Int('units_' + str(i),
            min_value=1,
            max_value=90,
            step=5),
            activation=activation))

    nn_model.add(tf.keras.layers.Dense(units=1, activation="sigmoid"))

    # Compile the model
    nn_model.compile(loss="binary_crossentropy", optimizer='adam', metrics=["accuracy"])

    return nn_model

# Import the kerastuner library
from tensorflow import keras

!pip install -q -U keras-tuner

import keras_tuner as kt

tuner = kt.Hyperband(
    create_model,
    objective="val_accuracy",
    max_epochs=20,
    hyperband_iterations=2)

# Run the kerastuner search for best hyperparameters
tuner.search(X_train_scaled,y_train,epochs=20,validation_data=(X_test_scaled,y_test))

best_hyper = tuner.get_best_hyperparameters(3)
for param in best_hyper:
  print(param.values)

top_model = tuner.get_best_models(3)
for model in top_model:
  model_loss, model_accuracy = model.evaluate(X_test_scaled, y_test, verbose=2)
  print(f"Loss: {model_loss}, Accuracy: {model_accuracy}")